package main

import "fmt"

/*
	Паттерн превращает запросы в отдельные объекты,	отделяя запросы от класса отправителя, позволяя осуществлять работу
	с запросами в рантайме, реализуя различные операции: выстраивание очередей	команд, хранение истории, реализации отмены и другое.
	Например, может использоваться для разделения слоя графического интерфейса,	от слоя бизнес-логики, которые будут общаться друг с другом посредством
	объектов команд: отправитель (графический интерфейс) будет вызывать нужную команду,	а получатель (бизнес-логика) будет делать нужное действие.
	При этом детали будут скрытых от обоих узлов.

	Плюсы:
	- Убирается прямая связь между отправителями и исполнителями запросов
	- Позволяет удобно реализовывать различные операции: отмена и повтор запросов,
	отложенный запуск запросов, выстраивание очереди запросов.

	Минусы:
	- Усложняет код из-за необходимости реализации дополнительных классов
	Реализовать паттерн можно для создания взаимодействия между
	кнопкой на пульте (интерфейсом, отправителем) и телевизором (бизнес-логикой, приемником).
	Команды On и Off будут включать и выключать телевизор.
*/

type Command interface { //Создаем базовый интерфейс команды
	Execute()
}

type CommandToOn struct {
	device Device //создаем поле - приемник //включение
}

func (on *CommandToOn) Execute() {
	on.device.On()
}

type CommandToOFF struct {
	device Device //поле - приемник //выключение
}

func (off *CommandToOFF) Execute() {
	off.device.Off() // соответствующий метод выключения у приемника
}

type Button struct {
	command Command
}

func (b *Button) Press() {
	b.command.Execute()
}

type Device interface { //Интерфейс устройства, требующий реализации методов включения и выключения
	On()
	Off()
}

type SomeDivice struct { //Конкретная реализация устройства с полем - состояния
	isShowing bool
}

func (s *SomeDivice) On() { //Метод включения устройства
	s.isShowing = true
	fmt.Println("Showing")
}

func (s *SomeDivice) Off() { //Метод выключения устройства
	s.isShowing = false
	fmt.Println("No Showing")
}

func main() {
	newDevice := &SomeDivice{} //создаем устройство - получатель команды

	onButton := Button{
		command: &CommandToOn{device: newDevice},
	} //создаем кнопку на включение

	offButton := Button{
		command: &CommandToOFF{device: newDevice},
	} //создаем кнопку на выключение

	onButton.Press()
	offButton.Press()
}
